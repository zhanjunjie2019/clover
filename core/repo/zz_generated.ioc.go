//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package repo

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &repoDBFactory_{}
		},
	})
	repoDBFactoryStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &RepoDBFactory{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(repoDBFactoryStructDescriptor)
}

type repoDBFactory_ struct {
	Initialization_ func() error
}

func (r *repoDBFactory_) Initialization() error {
	return r.Initialization_()
}

type RepoDBFactoryIOCInterface interface {
	Initialization() error
}

var _repoDBFactorySDID string

func GetRepoDBFactorySingleton() (*RepoDBFactory, error) {
	if _repoDBFactorySDID == "" {
		_repoDBFactorySDID = util.GetSDIDByStructPtr(new(RepoDBFactory))
	}
	i, err := singleton.GetImpl(_repoDBFactorySDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*RepoDBFactory)
	return impl, nil
}

func GetRepoDBFactoryIOCInterfaceSingleton() (RepoDBFactoryIOCInterface, error) {
	if _repoDBFactorySDID == "" {
		_repoDBFactorySDID = util.GetSDIDByStructPtr(new(RepoDBFactory))
	}
	i, err := singleton.GetImplWithProxy(_repoDBFactorySDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(RepoDBFactoryIOCInterface)
	return impl, nil
}
