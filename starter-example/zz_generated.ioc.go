//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package main

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &starter_{}
		},
	})
	starterStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &Starter{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(starterStructDescriptor)
}

type starter_ struct {
	Run_ func() error
}

func (s *starter_) Run() error {
	return s.Run_()
}

type StarterIOCInterface interface {
	Run() error
}

var _starterSDID string

func GetStarterSingleton() (*Starter, error) {
	if _starterSDID == "" {
		_starterSDID = util.GetSDIDByStructPtr(new(Starter))
	}
	i, err := singleton.GetImpl(_starterSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*Starter)
	return impl, nil
}

func GetStarterIOCInterfaceSingleton() (StarterIOCInterface, error) {
	if _starterSDID == "" {
		_starterSDID = util.GetSDIDByStructPtr(new(Starter))
	}
	i, err := singleton.GetImplWithProxy(_starterSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(StarterIOCInterface)
	return impl, nil
}

type ThisStarter struct {
}

func (t *ThisStarter) This() StarterIOCInterface {
	thisPtr, _ := GetStarterIOCInterfaceSingleton()
	return thisPtr
}
