//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package app

import (
	contextx "context"
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
	allimpls "github.com/alibaba/ioc-golang/extension/autowire/allimpls"
	"github.com/zhanjunjie2019/clover/global/defs"
	"gorm.io/gorm"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &permissionApp_{}
		},
	})
	permissionAppStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &PermissionApp{}
		},
		Metadata: map[string]interface{}{
			"aop": map[string]interface{}{},
			"autowire": map[string]interface{}{
				"common": map[string]interface{}{
					"implements": []interface{}{
						new(defs.IAppDef),
					},
				},
			},
		},
	}
	singleton.RegisterStructDescriptor(permissionAppStructDescriptor)
	allimpls.RegisterStructDescriptor(permissionAppStructDescriptor)
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &roleApp_{}
		},
	})
	roleAppStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &RoleApp{}
		},
		Metadata: map[string]interface{}{
			"aop": map[string]interface{}{},
			"autowire": map[string]interface{}{
				"common": map[string]interface{}{
					"implements": []interface{}{
						new(defs.IAppDef),
					},
				},
			},
		},
	}
	singleton.RegisterStructDescriptor(roleAppStructDescriptor)
	allimpls.RegisterStructDescriptor(roleAppStructDescriptor)
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &tenantApp_{}
		},
	})
	tenantAppStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &TenantApp{}
		},
		Metadata: map[string]interface{}{
			"aop": map[string]interface{}{},
			"autowire": map[string]interface{}{
				"common": map[string]interface{}{
					"implements": []interface{}{
						new(defs.IAppDef),
					},
				},
			},
		},
	}
	singleton.RegisterStructDescriptor(tenantAppStructDescriptor)
	allimpls.RegisterStructDescriptor(tenantAppStructDescriptor)
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &userApp_{}
		},
	})
	userAppStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &UserApp{}
		},
		Metadata: map[string]interface{}{
			"aop": map[string]interface{}{},
			"autowire": map[string]interface{}{
				"common": map[string]interface{}{
					"implements": []interface{}{
						new(defs.IAppDef),
					},
				},
			},
		},
	}
	singleton.RegisterStructDescriptor(userAppStructDescriptor)
	allimpls.RegisterStructDescriptor(userAppStructDescriptor)
}

type permissionApp_ struct {
	SetGormDB_        func(db *gorm.DB)
	PermissionCreate_ func(ctx contextx.Context, permissionName, authCode string) (id defs.ID, err error)
}

func (p *permissionApp_) SetGormDB(db *gorm.DB) {
	p.SetGormDB_(db)
}

func (p *permissionApp_) PermissionCreate(ctx contextx.Context, permissionName, authCode string) (id defs.ID, err error) {
	return p.PermissionCreate_(ctx, permissionName, authCode)
}

type roleApp_ struct {
	SetGormDB_  func(db *gorm.DB)
	RoleCreate_ func(ctx contextx.Context, roleName, roleCode string) (id defs.ID, err error)
}

func (r *roleApp_) SetGormDB(db *gorm.DB) {
	r.SetGormDB_(db)
}

func (r *roleApp_) RoleCreate(ctx contextx.Context, roleName, roleCode string) (id defs.ID, err error) {
	return r.RoleCreate_(ctx, roleName, roleCode)
}

type tenantApp_ struct {
	SetGormDB_         func(db *gorm.DB)
	TenantCreate_      func(ctx contextx.Context, tenantID, tenantName, redirect string, accessTTL uint64) (tid, secretKey string, err error)
	TenantInit_        func(ctx contextx.Context, tenantID string) (err error)
	TenantTokenCreate_ func(ctx contextx.Context, tenantID, secretKey string, accessTokenExpTime int64) (accessToken string, accessTokenExpirationTime int64, err error)
}

func (t *tenantApp_) SetGormDB(db *gorm.DB) {
	t.SetGormDB_(db)
}

func (t *tenantApp_) TenantCreate(ctx contextx.Context, tenantID, tenantName, redirect string, accessTTL uint64) (tid, secretKey string, err error) {
	return t.TenantCreate_(ctx, tenantID, tenantName, redirect, accessTTL)
}

func (t *tenantApp_) TenantInit(ctx contextx.Context, tenantID string) (err error) {
	return t.TenantInit_(ctx, tenantID)
}

func (t *tenantApp_) TenantTokenCreate(ctx contextx.Context, tenantID, secretKey string, accessTokenExpTime int64) (accessToken string, accessTokenExpirationTime int64, err error) {
	return t.TenantTokenCreate_(ctx, tenantID, secretKey, accessTokenExpTime)
}

type userApp_ struct {
	SetGormDB_             func(db *gorm.DB)
	UserCreate_            func(ctx contextx.Context, userName, password string) (id defs.ID, err error)
	UserAuthorizationCode_ func(ctx contextx.Context, userName, password, redirect string) (authorizationCode, redirectUrl string, err error)
}

func (u *userApp_) SetGormDB(db *gorm.DB) {
	u.SetGormDB_(db)
}

func (u *userApp_) UserCreate(ctx contextx.Context, userName, password string) (id defs.ID, err error) {
	return u.UserCreate_(ctx, userName, password)
}

func (u *userApp_) UserAuthorizationCode(ctx contextx.Context, userName, password, redirect string) (authorizationCode, redirectUrl string, err error) {
	return u.UserAuthorizationCode_(ctx, userName, password, redirect)
}

type PermissionAppIOCInterface interface {
	SetGormDB(db *gorm.DB)
	PermissionCreate(ctx contextx.Context, permissionName, authCode string) (id defs.ID, err error)
}

type RoleAppIOCInterface interface {
	SetGormDB(db *gorm.DB)
	RoleCreate(ctx contextx.Context, roleName, roleCode string) (id defs.ID, err error)
}

type TenantAppIOCInterface interface {
	SetGormDB(db *gorm.DB)
	TenantCreate(ctx contextx.Context, tenantID, tenantName, redirect string, accessTTL uint64) (tid, secretKey string, err error)
	TenantInit(ctx contextx.Context, tenantID string) (err error)
	TenantTokenCreate(ctx contextx.Context, tenantID, secretKey string, accessTokenExpTime int64) (accessToken string, accessTokenExpirationTime int64, err error)
}

type UserAppIOCInterface interface {
	SetGormDB(db *gorm.DB)
	UserCreate(ctx contextx.Context, userName, password string) (id defs.ID, err error)
	UserAuthorizationCode(ctx contextx.Context, userName, password, redirect string) (authorizationCode, redirectUrl string, err error)
}

var _permissionAppSDID string

func GetPermissionAppSingleton() (*PermissionApp, error) {
	if _permissionAppSDID == "" {
		_permissionAppSDID = util.GetSDIDByStructPtr(new(PermissionApp))
	}
	i, err := singleton.GetImpl(_permissionAppSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*PermissionApp)
	return impl, nil
}

func GetPermissionAppIOCInterfaceSingleton() (PermissionAppIOCInterface, error) {
	if _permissionAppSDID == "" {
		_permissionAppSDID = util.GetSDIDByStructPtr(new(PermissionApp))
	}
	i, err := singleton.GetImplWithProxy(_permissionAppSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(PermissionAppIOCInterface)
	return impl, nil
}

type ThisPermissionApp struct {
}

func (t *ThisPermissionApp) This() PermissionAppIOCInterface {
	thisPtr, _ := GetPermissionAppIOCInterfaceSingleton()
	return thisPtr
}

var _roleAppSDID string

func GetRoleAppSingleton() (*RoleApp, error) {
	if _roleAppSDID == "" {
		_roleAppSDID = util.GetSDIDByStructPtr(new(RoleApp))
	}
	i, err := singleton.GetImpl(_roleAppSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*RoleApp)
	return impl, nil
}

func GetRoleAppIOCInterfaceSingleton() (RoleAppIOCInterface, error) {
	if _roleAppSDID == "" {
		_roleAppSDID = util.GetSDIDByStructPtr(new(RoleApp))
	}
	i, err := singleton.GetImplWithProxy(_roleAppSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(RoleAppIOCInterface)
	return impl, nil
}

type ThisRoleApp struct {
}

func (t *ThisRoleApp) This() RoleAppIOCInterface {
	thisPtr, _ := GetRoleAppIOCInterfaceSingleton()
	return thisPtr
}

var _tenantAppSDID string

func GetTenantAppSingleton() (*TenantApp, error) {
	if _tenantAppSDID == "" {
		_tenantAppSDID = util.GetSDIDByStructPtr(new(TenantApp))
	}
	i, err := singleton.GetImpl(_tenantAppSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*TenantApp)
	return impl, nil
}

func GetTenantAppIOCInterfaceSingleton() (TenantAppIOCInterface, error) {
	if _tenantAppSDID == "" {
		_tenantAppSDID = util.GetSDIDByStructPtr(new(TenantApp))
	}
	i, err := singleton.GetImplWithProxy(_tenantAppSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(TenantAppIOCInterface)
	return impl, nil
}

type ThisTenantApp struct {
}

func (t *ThisTenantApp) This() TenantAppIOCInterface {
	thisPtr, _ := GetTenantAppIOCInterfaceSingleton()
	return thisPtr
}

var _userAppSDID string

func GetUserAppSingleton() (*UserApp, error) {
	if _userAppSDID == "" {
		_userAppSDID = util.GetSDIDByStructPtr(new(UserApp))
	}
	i, err := singleton.GetImpl(_userAppSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*UserApp)
	return impl, nil
}

func GetUserAppIOCInterfaceSingleton() (UserAppIOCInterface, error) {
	if _userAppSDID == "" {
		_userAppSDID = util.GetSDIDByStructPtr(new(UserApp))
	}
	i, err := singleton.GetImplWithProxy(_userAppSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(UserAppIOCInterface)
	return impl, nil
}

type ThisUserApp struct {
}

func (t *ThisUserApp) This() UserAppIOCInterface {
	thisPtr, _ := GetUserAppIOCInterfaceSingleton()
	return thisPtr
}
