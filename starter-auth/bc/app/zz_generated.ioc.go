//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package app

import (
	contextx "context"
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
	allimpls "github.com/alibaba/ioc-golang/extension/autowire/allimpls"
	"github.com/zhanjunjie2019/clover/global/defs"
	"gorm.io/gorm"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &tenantApp_{}
		},
	})
	tenantAppStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &TenantApp{}
		},
		Metadata: map[string]interface{}{
			"aop": map[string]interface{}{},
			"autowire": map[string]interface{}{
				"common": map[string]interface{}{
					"implements": []interface{}{
						new(defs.IAppDef),
					},
				},
			},
		},
	}
	singleton.RegisterStructDescriptor(tenantAppStructDescriptor)
	allimpls.RegisterStructDescriptor(tenantAppStructDescriptor)
}

type tenantApp_ struct {
	SetGormDB_    func(db *gorm.DB)
	TenantCreate_ func(ctx contextx.Context, layout *defs.LogLayout, tenantID, tenantName string) (tid, secretKey string, err error)
	TenantInit_   func(ctx contextx.Context, layout *defs.LogLayout, tenantID string) (err error)
}

func (t *tenantApp_) SetGormDB(db *gorm.DB) {
	t.SetGormDB_(db)
}

func (t *tenantApp_) TenantCreate(ctx contextx.Context, layout *defs.LogLayout, tenantID, tenantName string) (tid, secretKey string, err error) {
	return t.TenantCreate_(ctx, layout, tenantID, tenantName)
}

func (t *tenantApp_) TenantInit(ctx contextx.Context, layout *defs.LogLayout, tenantID string) (err error) {
	return t.TenantInit_(ctx, layout, tenantID)
}

type TenantAppIOCInterface interface {
	SetGormDB(db *gorm.DB)
	TenantCreate(ctx contextx.Context, layout *defs.LogLayout, tenantID, tenantName string) (tid, secretKey string, err error)
	TenantInit(ctx contextx.Context, layout *defs.LogLayout, tenantID string) (err error)
}

var _tenantAppSDID string

func GetTenantAppSingleton() (*TenantApp, error) {
	if _tenantAppSDID == "" {
		_tenantAppSDID = util.GetSDIDByStructPtr(new(TenantApp))
	}
	i, err := singleton.GetImpl(_tenantAppSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*TenantApp)
	return impl, nil
}

func GetTenantAppIOCInterfaceSingleton() (TenantAppIOCInterface, error) {
	if _tenantAppSDID == "" {
		_tenantAppSDID = util.GetSDIDByStructPtr(new(TenantApp))
	}
	i, err := singleton.GetImplWithProxy(_tenantAppSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(TenantAppIOCInterface)
	return impl, nil
}

type ThisTenantApp struct {
}

func (t *ThisTenantApp) This() TenantAppIOCInterface {
	thisPtr, _ := GetTenantAppIOCInterfaceSingleton()
	return thisPtr
}
