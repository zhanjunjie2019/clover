//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package gatewayimpl

import (
	contextx "context"
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
	"github.com/zhanjunjie2019/clover/share/auth/dto"
	"github.com/zhanjunjie2019/clover/starter-auth/bc/domain/model"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &tenantGateway_{}
		},
	})
	tenantGatewayStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &TenantGateway{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(tenantGatewayStructDescriptor)
}

type tenantGateway_ struct {
	FindByTenantID_            func(ctx contextx.Context, tenantID string) (tenant model.Tenant, exist bool, err error)
	Save_                      func(ctx contextx.Context, tenant model.Tenant) error
	PublishInitEvent_          func(ctx contextx.Context, dto dto.TenantInitEventDTO) error
	TenantTablesManualMigrate_ func(ctx contextx.Context) (err error)
}

func (t *tenantGateway_) FindByTenantID(ctx contextx.Context, tenantID string) (tenant model.Tenant, exist bool, err error) {
	return t.FindByTenantID_(ctx, tenantID)
}

func (t *tenantGateway_) Save(ctx contextx.Context, tenant model.Tenant) error {
	return t.Save_(ctx, tenant)
}

func (t *tenantGateway_) PublishInitEvent(ctx contextx.Context, dto dto.TenantInitEventDTO) error {
	return t.PublishInitEvent_(ctx, dto)
}

func (t *tenantGateway_) TenantTablesManualMigrate(ctx contextx.Context) (err error) {
	return t.TenantTablesManualMigrate_(ctx)
}

type TenantGatewayIOCInterface interface {
	FindByTenantID(ctx contextx.Context, tenantID string) (tenant model.Tenant, exist bool, err error)
	Save(ctx contextx.Context, tenant model.Tenant) error
	PublishInitEvent(ctx contextx.Context, dto dto.TenantInitEventDTO) error
	TenantTablesManualMigrate(ctx contextx.Context) (err error)
}

var _tenantGatewaySDID string

func GetTenantGatewaySingleton() (*TenantGateway, error) {
	if _tenantGatewaySDID == "" {
		_tenantGatewaySDID = util.GetSDIDByStructPtr(new(TenantGateway))
	}
	i, err := singleton.GetImpl(_tenantGatewaySDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*TenantGateway)
	return impl, nil
}

func GetTenantGatewayIOCInterfaceSingleton() (TenantGatewayIOCInterface, error) {
	if _tenantGatewaySDID == "" {
		_tenantGatewaySDID = util.GetSDIDByStructPtr(new(TenantGateway))
	}
	i, err := singleton.GetImplWithProxy(_tenantGatewaySDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(TenantGatewayIOCInterface)
	return impl, nil
}

type ThisTenantGateway struct {
}

func (t *ThisTenantGateway) This() TenantGatewayIOCInterface {
	thisPtr, _ := GetTenantGatewayIOCInterfaceSingleton()
	return thisPtr
}
