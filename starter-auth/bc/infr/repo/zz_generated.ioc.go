//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package repo

import (
	contextx "context"
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
	allimpls "github.com/alibaba/ioc-golang/extension/autowire/allimpls"
	defs "github.com/zhanjunjie2019/clover/global/defs"
	"github.com/zhanjunjie2019/clover/starter-auth/bc/infr/repo/po"
	"gorm.io/gorm"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &tenantRepo_{}
		},
	})
	tenantRepoStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &TenantRepo{}
		},
		Metadata: map[string]interface{}{
			"aop": map[string]interface{}{},
			"autowire": map[string]interface{}{
				"common": map[string]interface{}{
					"implements": []interface{}{
						new(defs.IRepo),
					},
				},
			},
		},
	}
	singleton.RegisterStructDescriptor(tenantRepoStructDescriptor)
	allimpls.RegisterStructDescriptor(tenantRepoStructDescriptor)
}

type tenantRepo_ struct {
	AutoMigrate_    func(ctx contextx.Context, db *gorm.DB) error
	FindByTenantID_ func(ctx contextx.Context, tenantID string) (tenantPO po.Tenant, exist bool, err error)
	Save_           func(ctx contextx.Context, tenantPO po.Tenant) error
}

func (t *tenantRepo_) AutoMigrate(ctx contextx.Context, db *gorm.DB) error {
	return t.AutoMigrate_(ctx, db)
}

func (t *tenantRepo_) FindByTenantID(ctx contextx.Context, tenantID string) (tenantPO po.Tenant, exist bool, err error) {
	return t.FindByTenantID_(ctx, tenantID)
}

func (t *tenantRepo_) Save(ctx contextx.Context, tenantPO po.Tenant) error {
	return t.Save_(ctx, tenantPO)
}

type TenantRepoIOCInterface interface {
	AutoMigrate(ctx contextx.Context, db *gorm.DB) error
	FindByTenantID(ctx contextx.Context, tenantID string) (tenantPO po.Tenant, exist bool, err error)
	Save(ctx contextx.Context, tenantPO po.Tenant) error
}

var _tenantRepoSDID string

func GetTenantRepoSingleton() (*TenantRepo, error) {
	if _tenantRepoSDID == "" {
		_tenantRepoSDID = util.GetSDIDByStructPtr(new(TenantRepo))
	}
	i, err := singleton.GetImpl(_tenantRepoSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*TenantRepo)
	return impl, nil
}

func GetTenantRepoIOCInterfaceSingleton() (TenantRepoIOCInterface, error) {
	if _tenantRepoSDID == "" {
		_tenantRepoSDID = util.GetSDIDByStructPtr(new(TenantRepo))
	}
	i, err := singleton.GetImplWithProxy(_tenantRepoSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(TenantRepoIOCInterface)
	return impl, nil
}

type ThisTenantRepo struct {
}

func (t *ThisTenantRepo) This() TenantRepoIOCInterface {
	thisPtr, _ := GetTenantRepoIOCInterfaceSingleton()
	return thisPtr
}
