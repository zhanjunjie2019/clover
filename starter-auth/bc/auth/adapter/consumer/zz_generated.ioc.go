//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package consumer

import (
	contextx "context"
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	allimpls "github.com/alibaba/ioc-golang/extension/autowire/allimpls"
	defs "github.com/zhanjunjie2019/clover/global/defs"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &tenantInitConsumer_{}
		},
	})
	tenantInitConsumerStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &TenantInitConsumer{}
		},
		Metadata: map[string]interface{}{
			"aop": map[string]interface{}{},
			"autowire": map[string]interface{}{
				"common": map[string]interface{}{
					"implements": []interface{}{
						new(defs.IConsumer),
					},
				},
			},
		},
	}
	allimpls.RegisterStructDescriptor(tenantInitConsumerStructDescriptor)
	var _ defs.IConsumer = &TenantInitConsumer{}
}

type tenantInitConsumer_ struct {
	GetTopic_      func() string
	HandleMessage_ func(ctx contextx.Context, bytes []byte) error
}

func (t *tenantInitConsumer_) GetTopic() string {
	return t.GetTopic_()
}

func (t *tenantInitConsumer_) HandleMessage(ctx contextx.Context, bytes []byte) error {
	return t.HandleMessage_(ctx, bytes)
}

type TenantInitConsumerIOCInterface interface {
	GetTopic() string
	HandleMessage(ctx contextx.Context, bytes []byte) error
}

var _tenantInitConsumerSDID string
