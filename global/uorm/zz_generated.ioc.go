//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package uorm

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
	"github.com/zhanjunjie2019/clover/global/confs"
	"gorm.io/gorm"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &dBFactory_{}
		},
	})
	dBFactoryStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &DBFactory{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(dBFactoryStructDescriptor)
}

type dBFactory_ struct {
	Create_ func(linkConf confs.DBConfig) (bool, error)
	GetDB_  func() *gorm.DB
}

func (d *dBFactory_) Create(linkConf confs.DBConfig) (bool, error) {
	return d.Create_(linkConf)
}

func (d *dBFactory_) GetDB() *gorm.DB {
	return d.GetDB_()
}

type DBFactoryIOCInterface interface {
	Create(linkConf confs.DBConfig) (bool, error)
	GetDB() *gorm.DB
}

var _dBFactorySDID string

func GetDBFactorySingleton() (*DBFactory, error) {
	if _dBFactorySDID == "" {
		_dBFactorySDID = util.GetSDIDByStructPtr(new(DBFactory))
	}
	i, err := singleton.GetImpl(_dBFactorySDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*DBFactory)
	return impl, nil
}

func GetDBFactoryIOCInterfaceSingleton() (DBFactoryIOCInterface, error) {
	if _dBFactorySDID == "" {
		_dBFactorySDID = util.GetSDIDByStructPtr(new(DBFactory))
	}
	i, err := singleton.GetImplWithProxy(_dBFactorySDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(DBFactoryIOCInterface)
	return impl, nil
}

type ThisDBFactory struct {
}

func (t *ThisDBFactory) This() DBFactoryIOCInterface {
	thisPtr, _ := GetDBFactoryIOCInterfaceSingleton()
	return thisPtr
}
