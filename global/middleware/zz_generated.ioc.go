//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package middleware

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
	"github.com/gin-gonic/gin"
	"github.com/zhanjunjie2019/clover/global/defs"
	"go-micro.dev/v4/server"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &authMiddleware_{}
		},
	})
	authMiddlewareStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &AuthMiddleware{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(authMiddlewareStructDescriptor)
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &loggerMiddleware_{}
		},
	})
	loggerMiddlewareStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &LoggerMiddleware{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(loggerMiddlewareStructDescriptor)
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &sentinelMiddleware_{}
		},
	})
	sentinelMiddlewareStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &SentinelMiddleware{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(sentinelMiddlewareStructDescriptor)
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &traceMiddleware_{}
		},
	})
	traceMiddlewareStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &TraceMiddleware{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(traceMiddlewareStructDescriptor)
}

type authMiddleware_ struct {
	MiddlewareWrapHandlerByAuthCodes_ func(authCodes []string) server.HandlerWrapper
	MiddlewareHandlerFunc_            func(option *defs.ControllerOption) gin.HandlerFunc
	filter_                           func(token defs.JwtClaims, authCodes []string, tenantID string) error
}

func (a *authMiddleware_) MiddlewareWrapHandlerByAuthCodes(authCodes []string) server.HandlerWrapper {
	return a.MiddlewareWrapHandlerByAuthCodes_(authCodes)
}

func (a *authMiddleware_) MiddlewareHandlerFunc(option *defs.ControllerOption) gin.HandlerFunc {
	return a.MiddlewareHandlerFunc_(option)
}

func (a *authMiddleware_) filter(token defs.JwtClaims, authCodes []string, tenantID string) error {
	return a.filter_(token, authCodes, tenantID)
}

type loggerMiddleware_ struct {
	MiddlewareWrapHandler_ func() server.HandlerWrapper
	MiddlewareHandlerFunc_ func(option *defs.ControllerOption) gin.HandlerFunc
}

func (l *loggerMiddleware_) MiddlewareWrapHandler() server.HandlerWrapper {
	return l.MiddlewareWrapHandler_()
}

func (l *loggerMiddleware_) MiddlewareHandlerFunc(option *defs.ControllerOption) gin.HandlerFunc {
	return l.MiddlewareHandlerFunc_(option)
}

type sentinelMiddleware_ struct {
	MiddlewareWrapHandler_                   func() server.HandlerWrapper
	MiddlewareWrapHandlerBySentinelStrategy_ func(sentinelStrategy string) server.HandlerWrapper
	MiddlewareHandlerFunc_                   func(option *defs.ControllerOption) gin.HandlerFunc
	filter_                                  func(tenantID, sentinelResourceSuffix string) error
}

func (s *sentinelMiddleware_) MiddlewareWrapHandler() server.HandlerWrapper {
	return s.MiddlewareWrapHandler_()
}

func (s *sentinelMiddleware_) MiddlewareWrapHandlerBySentinelStrategy(sentinelStrategy string) server.HandlerWrapper {
	return s.MiddlewareWrapHandlerBySentinelStrategy_(sentinelStrategy)
}

func (s *sentinelMiddleware_) MiddlewareHandlerFunc(option *defs.ControllerOption) gin.HandlerFunc {
	return s.MiddlewareHandlerFunc_(option)
}

func (s *sentinelMiddleware_) filter(tenantID, sentinelResourceSuffix string) error {
	return s.filter_(tenantID, sentinelResourceSuffix)
}

type traceMiddleware_ struct {
	MiddlewareWrapHandler_ func() server.HandlerWrapper
	MiddlewareHandlerFunc_ func(option *defs.ControllerOption) gin.HandlerFunc
}

func (t *traceMiddleware_) MiddlewareWrapHandler() server.HandlerWrapper {
	return t.MiddlewareWrapHandler_()
}

func (t *traceMiddleware_) MiddlewareHandlerFunc(option *defs.ControllerOption) gin.HandlerFunc {
	return t.MiddlewareHandlerFunc_(option)
}

type AuthMiddlewareIOCInterface interface {
	MiddlewareWrapHandlerByAuthCodes(authCodes []string) server.HandlerWrapper
	MiddlewareHandlerFunc(option *defs.ControllerOption) gin.HandlerFunc
	filter(token defs.JwtClaims, authCodes []string, tenantID string) error
}

type LoggerMiddlewareIOCInterface interface {
	MiddlewareWrapHandler() server.HandlerWrapper
	MiddlewareHandlerFunc(option *defs.ControllerOption) gin.HandlerFunc
}

type SentinelMiddlewareIOCInterface interface {
	MiddlewareWrapHandler() server.HandlerWrapper
	MiddlewareWrapHandlerBySentinelStrategy(sentinelStrategy string) server.HandlerWrapper
	MiddlewareHandlerFunc(option *defs.ControllerOption) gin.HandlerFunc
	filter(tenantID, sentinelResourceSuffix string) error
}

type TraceMiddlewareIOCInterface interface {
	MiddlewareWrapHandler() server.HandlerWrapper
	MiddlewareHandlerFunc(option *defs.ControllerOption) gin.HandlerFunc
}

var _authMiddlewareSDID string

func GetAuthMiddlewareSingleton() (*AuthMiddleware, error) {
	if _authMiddlewareSDID == "" {
		_authMiddlewareSDID = util.GetSDIDByStructPtr(new(AuthMiddleware))
	}
	i, err := singleton.GetImpl(_authMiddlewareSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*AuthMiddleware)
	return impl, nil
}

func GetAuthMiddlewareIOCInterfaceSingleton() (AuthMiddlewareIOCInterface, error) {
	if _authMiddlewareSDID == "" {
		_authMiddlewareSDID = util.GetSDIDByStructPtr(new(AuthMiddleware))
	}
	i, err := singleton.GetImplWithProxy(_authMiddlewareSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(AuthMiddlewareIOCInterface)
	return impl, nil
}

type ThisAuthMiddleware struct {
}

func (t *ThisAuthMiddleware) This() AuthMiddlewareIOCInterface {
	thisPtr, _ := GetAuthMiddlewareIOCInterfaceSingleton()
	return thisPtr
}

var _loggerMiddlewareSDID string

func GetLoggerMiddlewareSingleton() (*LoggerMiddleware, error) {
	if _loggerMiddlewareSDID == "" {
		_loggerMiddlewareSDID = util.GetSDIDByStructPtr(new(LoggerMiddleware))
	}
	i, err := singleton.GetImpl(_loggerMiddlewareSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*LoggerMiddleware)
	return impl, nil
}

func GetLoggerMiddlewareIOCInterfaceSingleton() (LoggerMiddlewareIOCInterface, error) {
	if _loggerMiddlewareSDID == "" {
		_loggerMiddlewareSDID = util.GetSDIDByStructPtr(new(LoggerMiddleware))
	}
	i, err := singleton.GetImplWithProxy(_loggerMiddlewareSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(LoggerMiddlewareIOCInterface)
	return impl, nil
}

type ThisLoggerMiddleware struct {
}

func (t *ThisLoggerMiddleware) This() LoggerMiddlewareIOCInterface {
	thisPtr, _ := GetLoggerMiddlewareIOCInterfaceSingleton()
	return thisPtr
}

var _sentinelMiddlewareSDID string

func GetSentinelMiddlewareSingleton() (*SentinelMiddleware, error) {
	if _sentinelMiddlewareSDID == "" {
		_sentinelMiddlewareSDID = util.GetSDIDByStructPtr(new(SentinelMiddleware))
	}
	i, err := singleton.GetImpl(_sentinelMiddlewareSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*SentinelMiddleware)
	return impl, nil
}

func GetSentinelMiddlewareIOCInterfaceSingleton() (SentinelMiddlewareIOCInterface, error) {
	if _sentinelMiddlewareSDID == "" {
		_sentinelMiddlewareSDID = util.GetSDIDByStructPtr(new(SentinelMiddleware))
	}
	i, err := singleton.GetImplWithProxy(_sentinelMiddlewareSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(SentinelMiddlewareIOCInterface)
	return impl, nil
}

type ThisSentinelMiddleware struct {
}

func (t *ThisSentinelMiddleware) This() SentinelMiddlewareIOCInterface {
	thisPtr, _ := GetSentinelMiddlewareIOCInterfaceSingleton()
	return thisPtr
}

var _traceMiddlewareSDID string

func GetTraceMiddlewareSingleton() (*TraceMiddleware, error) {
	if _traceMiddlewareSDID == "" {
		_traceMiddlewareSDID = util.GetSDIDByStructPtr(new(TraceMiddleware))
	}
	i, err := singleton.GetImpl(_traceMiddlewareSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*TraceMiddleware)
	return impl, nil
}

func GetTraceMiddlewareIOCInterfaceSingleton() (TraceMiddlewareIOCInterface, error) {
	if _traceMiddlewareSDID == "" {
		_traceMiddlewareSDID = util.GetSDIDByStructPtr(new(TraceMiddleware))
	}
	i, err := singleton.GetImplWithProxy(_traceMiddlewareSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(TraceMiddlewareIOCInterface)
	return impl, nil
}

type ThisTraceMiddleware struct {
}

func (t *ThisTraceMiddleware) This() TraceMiddlewareIOCInterface {
	thisPtr, _ := GetTraceMiddlewareIOCInterfaceSingleton()
	return thisPtr
}
